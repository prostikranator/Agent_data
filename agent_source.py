# agent_source.py (–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö)

import os
import logging
import pandas as pd
from flask import Flask, jsonify
from tinkoff.invest import Client, MoneyValue, PortfolioResponse
from tinkoff.invest.exceptions import RequestError

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –¢–∏–Ω—å–∫–æ—Ñ—Ñ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TINKOFF_API_TOKEN = os.getenv("TINKOFF_API_TOKEN")

app = Flask(__name__)

if not TINKOFF_API_TOKEN:
    logger.critical("‚ùå TINKOFF_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏.")

# --- 2. –§–£–ù–ö–¶–ò–ò ---

def to_rubles(money: MoneyValue) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MoneyValue –≤ float —Ä—É–±–ª–µ–π."""
    return money.units + money.nano / 1_000_000_000

def get_tinkoff_portfolio_data() -> tuple[int, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É."""
    if not TINKOFF_API_TOKEN:
        return 500, "‚ùå –û—à–∏–±–∫–∞: TINKOFF_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω."
        
    try:
        with Client(TINKOFF_API_TOKEN) as client:
            accounts = client.users.get_accounts().accounts
            if not accounts:
                return 200, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤."
            account_id = accounts[0].id
            
            portfolio: PortfolioResponse = client.operations.get_portfolio(account_id=account_id)
            data = []
            total_value = to_rubles(portfolio.total_amount_portfolio)
            
            for p in portfolio.positions:
                expected_yield_value = to_rubles(p.expected_yield) if p.expected_yield else 0
                current_price = to_rubles(p.current_price)
                if p.quantity is None or p.quantity.units == 0:
                    continue
                total_position_value = current_price * p.quantity.units
                data.append({
                    '–¢–∏–∫–µ—Ä/FIGI': p.figi,
                    '–¢–∏–ø': p.instrument_type,
                    '–ö–æ–ª-–≤–æ': p.quantity.units,
                    '–¶–µ–Ω–∞ (RUB)': f"{current_price:.2f}",
                    '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)': f"{expected_yield_value / total_position_value * 100:.2f}" if total_position_value else "0.00"
                })

            df = pd.DataFrame(data)
            header = f"<b>üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:.2f} RUB</b>\n\n"
            
            if not df.empty:
                table_text = df.to_markdown(index=False, numalign="left", stralign="left")
                report = header + f"<pre>{table_text}</pre>"
            else:
                report = header + "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."

            return 200, report

    except RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {e}")
        return 500, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API –¢–∏–Ω—å–∫–æ—Ñ—Ñ."
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        return 500, f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

# --- 3. –ú–ê–†–®–†–£–¢–´ API ---

@app.route('/api/v1/portfolio', methods=['GET'])
def portfolio_api():
    """–û—Ç–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ HTTP-–∑–∞–ø—Ä–æ—Å—É."""
    status_code, report = get_tinkoff_portfolio_data()
    return jsonify({"report": report}), status_code

@app.route('/')
def index():
    return "‚úÖ –ê–≥–µ–Ω—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω.", 200

# --- 4. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    port = int(os.environ.get("AGENT_PORT", 8000))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8000), –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—è—Å—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
    app.run(host="0.0.0.0", port=port)
